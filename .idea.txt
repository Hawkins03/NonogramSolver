//prob_arr is a list of pointers to array indicies - int *prob_array[];
//could pull in the blocks using regex from a file.
start(int *prob_arr[], int length, int block_arr[], int blocks) {
  if (blocks == 0)
    mark_all_as_empty();
  if (length == 0)
    return 0;
  calculate_total_block_len();
  for (int i = 0; i < row_len - total_block_len; i++) {
    //check_for_full_and_empty_blocks
    for (int j = 0; j < block_arr[0]; j++)
      prob_arr[j]++; // if prob_arr[j] >= len - blocks_arr[0];

    if (prob_arr[i] == EMPTY) {
      prob_arr += start(prob_arr + i, length - i, block_arr, blocks);
      return prob_arr;
    }

    if (prob_arr[i] == FULL) {
      prob_arr += start(prob_arr, i + block_arr[0], {block_arr[0]}, 1);
      prob_arr += start(prob_arr + block_arr[0] + 1, length - blocks_arr[0] - 1, block_arr + 1, blocks - 1);
      return prob_arr;
    }
  }
  prob_arr += start(prob_arr + block_arr[0] + 1, length - block_arr[0] - 1, block_arr + 1, blocks - 1);
  return prob_arr;
}

main {
  int prev_sum = 0;
  array;
  row_blocks;
  column_blocks;
  int length;
  int height;
  int *prob_arr[];
  while (TRUE) {
    for (int i = 0; i < length; i++) {
      for (int j = 0; j < height; j++)
        prob_arr[j] = &array[i][j];
      array[i][0:] += start(array[i], length, row_blocks[i], //blocks_in_row_blocks[i]);
      // check for full and empty blocks
    }
    for (int i = 0; i < height; i++) {
      for (int j = 0; j < length; j++)
        prob_arr[j] = &array[j][i];
      array[0:][i] += start(array[0+][i], height, column_blocks[i], //num_blocks);
      //check for full and empty blocks
    }

    int sum_probabilities;
    // sum all probabilities:
    if (sum_full_spaces == sum_blocks)
      //display array
    if (sum_empty_spaces == length * height - sum_blocks)
      // fill in all other blocks (possibly by running again)

    if (sum_probabilities <= prev_sum)
      return array;
    prev_sum = sum_probabilities;
